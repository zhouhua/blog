---
import type { CollectionEntry } from 'astro:content';
import { dirname, join } from 'node:path';
import ArticlesPair from '@components/ArticlesPair.astro';
import ArticleTitle from '@components/ArticleTitle.astro';
import Container from '@components/Container.astro';
import PageLayout from '@layouts/PageLayout.astro';
import { getExcerpt, getImage, getReadInfo } from '@lib/html';
import { cn } from '@lib/utils';
import Comment from '@react/components/Comment';
import TracingBeam from '@react/components/TracingBeam';
import styles from '@styles/article.module.css';
import { Picture } from 'astro:assets';
import { getCollection, getEntry, render } from 'astro:content';
import { sampleSize } from 'lodash-es';

export const prerender = true;
export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map(post => ({
    params: { slug: post.id },
    props: { next: sampleSize(posts, 2), post },
  }));
}
interface Props {
  post: CollectionEntry<'blog'>;
  next: [CollectionEntry<'blog'>, CollectionEntry<'blog'>];
}

const { next, post } = Astro.props;
const { Content } = await render(post);
const entry = await getEntry({ collection: 'blog', id: post.id });
const html = entry!.body!;
const { timeToRead, wordCount } = getReadInfo(html);
const hero = getImage(join('content/blog/', dirname(post.id), post.data.hero));
const excerpt = getExcerpt(html);
---
<style lang="postcss">
.hero {
  max-width: calc(min(1560px, 100%));
  margin: 0 auto;
  box-shadow:
    0 30px 60px -10px rgba(0, 0, 0, 0.2),
    0 18px 36px -18px rgba(0, 0, 0, 0.22);
  @media (max-width: theme(screens.sm.max)) {
    height: 220px;
    object-fit: cover;
  }
}
.lineTitle {
  @apply text-palette-primary relative pb-20 font-normal opacity-25 md:pb-[60px];
  transition:
    background 0.25s var(--ease-in-out-quad),
    color 0.25s var(--ease-in-out-quad);
  &::after {
    @apply absolute left-40 right-0 top-[11px] h-px content-[''];
    @apply bg-palette-gray;
    transition:
      background 0.25s var(--ease-in-out-quad),
      color 0.25s var(--ease-in-out-quad);
  }
}
</style>
<PageLayout description={excerpt} title={post.data.title}>
  <ArticleTitle tags={post.data.tags} time={post.data.date} title={post.data.title}>
    {wordCount}个字 &bull; {timeToRead}分钟读完
  </ArticleTitle>
  {hero && (
    <div class="relative w-fit h-fit">
      <Picture
        alt="hero"
        class="hero relative z-10"
        formats={['webp', 'jpg']}
        sizes={`(max-width: 480px) 360px, (max-width: 720px) 640px, (max-width: 1280px) 1000px, (max-width: 1600px) 1280px, ${hero.width}px`}
        src={hero}
        widths={[360, 640, 1000, 1280, hero.width]}
      />
      {post.data.heroCopyright && (
        <div
          class="text-palette-secondary leading-5 text-xs text-center mt-2"
          set:html={post.data.heroCopyright}
        />
      )}
    </div>
  )}
    <TracingBeam client:only="react" />
    <article class={cn(styles.ArticleBody)} id="ArticleContent">
      <Content />
    </article>
  <Comment client:only="react" />
  <Container>
      <h3 class="lineTitle">看看其他的文章</h3>
      <ArticlesPair gridLayout="tiles" posts={next} reverse={false} />
      <div class="mb-[65px]" />
  </Container>
</PageLayout>
