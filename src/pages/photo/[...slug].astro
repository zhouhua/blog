---
import type { CustomPhotoType, Exif, PhotoImage } from '@types';
import { dirname, join, resolve } from 'node:path';
import ArticleTitle from '@components/ArticleTitle.astro';
import Container from '@components/Container.astro';
import { BLOG } from '@consts';
import PageLayout from '@layouts/PageLayout.astro';
import { getImage } from '@lib/html';
import GroupSection from '@react/components/photo/GroupSection';
import { getImage as transform } from 'astro:assets';
import { type CollectionEntry, getCollection } from 'astro:content';
import exif from 'fast-exif';
import { sampleSize } from 'lodash-es';
import Comment from '@react/components/Comment';
import ImageGallery from '@react/components/photo/ImageGallery';
import {getRoot} from '@lib/node';

export const prerender = true;
export async function getStaticPaths() {
  const data: CollectionEntry<'photos'>[] = await getCollection('photos');
  return data.map(item => ({
    params: {
      slug: `${dirname(item.id)}`,
    },
    props: {
      post: item,
    },
  }));
}

interface Props {
  post: CollectionEntry<'photos'>;
}

const { post } = Astro.props;

const photos: PhotoImage[] = [];
for (const item of post.data.list) {
  const { description, picture } = item;
  const relativePath = join(post.filePath || '.', '..', picture);
  const root = await getRoot();
  let exifData: Exif = undefined;
  try{
    exifData = await exif.read(resolve(root, relativePath), true);
  }catch(e) {
    console.log(e);
  }
  const image = getImage(relativePath)!;
  photos.push({
    exif: exifData,
    height: image.height,
    title: description,
    transformed: await transform({
      formats: ['webp', 'jpg'],
      src: image,
      widths: [200, 400, 800, 1200],
    }),
    width: image.width,
  });
}
type Temp = {path: string} & Omit<CustomPhotoType, 'transformed' | 'width' | 'height'>
const data = await getCollection('photos');
const featuredImages = data.reduce<Temp[]>((list, item) => [
  ...list, 
  ...item.data.list.filter(({featured}) => featured).map(({picture}) => ({
    alt: item.data.title,
    count: item.data.list.length,
    date: item.data.date,
    slug: dirname(item.id),
    path: join(item.filePath || '.', '..', picture),
  })),
], []);
const extraList = sampleSize(featuredImages, 16);
const transformedExtraList: CustomPhotoType[] = [];
for (const item of extraList) {
  const image = getImage(item.path)!;
  transformedExtraList.push({
    ...item,
    transformed: await transform({
      formats: ['webp', 'jpg'],
      src: image,
      widths: [200, 400, 800, 1200],
    }),
    width: image.width,
    height: image.height,
  });
}
---

<style lang="postcss">
.lineTitle {
  @apply text-palette-primary relative pb-20 font-normal opacity-25 md:pb-[60px];
  transition:
    background 0.25s var(--ease-in-out-quad),
    color 0.25s var(--ease-in-out-quad);
  &::after {
    @apply absolute left-40 right-0 top-[11px] h-px content-[''];
    @apply bg-palette-gray;
    transition:
      background 0.25s var(--ease-in-out-quad),
      color 0.25s var(--ease-in-out-quad);
  }
}
</style>

<PageLayout description={BLOG.DESCRIPTION} title={BLOG.TITLE}>
  <ArticleTitle title={post.data.title} time={post.data.date}>
    {post.data.list.length} 张图
  </ArticleTitle>
  <Container class="min-w-[360px] max-w-full px-20 sm:px-5 md:px-8 lg:px-8 xl:px-8">
    <GroupSection client:only="react" photoPosts={photos} />
  </Container>
  <Comment client:only="react" />
  {transformedExtraList.length > 0 && (
    <Container>
      <h3 class="lineTitle">看看更多照片</h3>
      <ImageGallery client:only="react" photos={transformedExtraList} />
      <div class="mb-[65px]" />
    </Container>
  )}
  </Layout>
</PageLayout>
